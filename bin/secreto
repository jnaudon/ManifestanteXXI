#!/bin/bash
#
#	cifrado y descifrado de mensajes y archivos
#	secreto - version 0.1
#
# --------------------------- funciones ---------------------------------
if [ "$1" == "-h" ]; then
	echo "$0 "
	echo
	echo "  -h Esta ayuda"
	echo "  -i Instalación"
	exit
fi

function opciones {
	while getopts t:m: OPCION
	do
	        case $OPCION in
	                t) TITULO=${OPTARG}
	                ;;
	                m) MENSAJE=${OPTARG}
	                ;;
	        esac
	done
	# parametros
	N=0
	for T in $(cat /dev/stdin); do
		T=$(echo $T | sed 's/_/\ /g')
		C="$C $N \"$T\""
		N=$(($N+1))
	done
	# genera el menu
	eval "zenity --title \"$TITULO\" --text \"$MENSAJE\" --list --height=250 --column \"\" --column \"\" --hide-column 1  --hide-header $C"
}
function metadatos {
	convert -strip "$1" "$1"
}
function borrar {
	shred -uz -n 10 "$1"
}
function pastie {
	f=`mktemp`
	cat /dev/stdin > $f
	PASTIE=`echo "bpaste ca codepad dpaste gists poundpython" | sed 's/\ /\n/g'| sed -n $[$RANDOM%6+1]p`
	proxychains wgetpaste -g -r -n $(pwgen -s -1) -s $PASTIE $f | sed -n '2p' | sed 's/^.*:\ //'
	borrar $f
}
function cifrar {
	cat /dev/stdin | mcrypt -u -k "$1" -F | base64 $2
}
function descifrar {
	cat /dev/stdin | tr "\n" " " | sed -e :a -e 's/<[^>]*>//g;/</N;//ba' \
	| sed 's/[^0-9A-Za-z=\/+-]//g' | base64 -d | mdecrypt - -k "$1" -F
}
function esteganografia {
	cat "$2" | descifrar "$1" ||\
	zbarimg --raw -q "$2" | descifrar "$1" || \
	steghide extract -p "$1" -sf "$2" -xf -
}
function error {
	zenity --error --text="$*"
}
function alerta {
	zenity --warning --text="$(cat /dev/stdin)"
}
function clave {
	zenity --title "Clave" --text "Introducir la clave" --entry --entry-text="$*"
}
function url {
	zenity --title "URL" --text "Dirección" --entry --entry-text="$*"
}
function archivo {
	zenity --title "Elije el archivo" --file-selection
}
function archivos {
	echo -e "$(zenity --title "Archivos" --text="Elije el archivos" --file-selection --multiple --separator="\n")"
}
function mensaje {
	zenity --title "Mensaje" --text="Escribe el mensaje" --width=450 --height=350 --text-info --editable
}
function mostrar {
	# mensaje de entrada
	MENSAJE=`cat /dev/stdin`
	if [ "$(echo "$MENSAJE" | wc -l )" == "1" ]; then
		zenity --title "Mensaje decifrado" --width=450 --text="$*" --entry --entry-text="$MENSAJE"
	else
		echo "$MENSAJE" | zenity --title "Mensaje decifrado" --text="$*" --width=450 --height=350 --text-info
	fi
	echo "$MENSAJE" | xsel -i
}
function progreso {
	zenity  --progress --pulsate --auto-close --auto-kill --no-cancel
}

#--------------- instalacion -----------------

if [ "$1" == "-i" ]; then
	NOMBRE=`basename $0`
	#echo "$NOMBRE no esta instalado" | mostrar
	echo -e "[Desktop Entry]\nName=$NOMBRE\nDescription=No tengo nada que ocultar, pero si mucho que proteger\nIcon=help-faq\nType=Application\nExec=$NOMBRE\nCategories=GTK;Utility;" > /tmp/$NOMBRE.desktop
	# dependencias
	TMP=$(mktemp)

	# verifica el sistema operativo
	if [ "$(which yum)" ]; then
		aptitude="yum -y install"
	elif [ "$(which pacman)" ]; then
		aptitude="pacman -S"
	else
		aptitude="apt-get -y install"
	fi
	if [ "$(which gksu)" ]; then
		gksu="gksu"
	else
		gksu="su -c"
	fi
	echo "$aptitude imagemagick
	$aptitude steghide
	$aptitude mcrypt
	$aptitude zenity
	$aptitude tor
	$aptitude proxychains
	$aptitude zbar-tools
	$aptitude qrencode
	cp $NOMBRE /usr/bin/
	cp /tmp/$NOMBRE.desktop /usr/share/applications/$NOMBRE.desktop" > $TMP
	$gksu "bash $TMP" #| progreso
	rm $TMP
fi
# hacer que funcione en otros Sistemas operativos y que sea mas simple

# -------------------------- programa ----------------------------------


# ¿Que queres hacer?
MENU=`echo  "Cifrar Descifrar Publicación_Anónima Quitar_metadatos Eliminar_archivos Ayuda" | opciones -t "Secreto" -m "¿Que queres hacer?"`

case $MENU in
	0 )
	# Cifrar
	#------------------ entrada ----------------------
	MENU=`echo -e "Escribir_mensaje Archivo" | opciones -t "Ciframe" -m "¿Que deseas proteger?"` || exit
	case $MENU in
		0 )
			ef=`mensaje`
		;;
		1 )
			ef=`cat $(archivo || exit)`
		;;
	esac
	k=`clave $(pwgen  -1 -s $[$RANDOM%6+6])`
	MENU=`echo -e "Texto Imagen_o_Audio Imagen_al_azar_de_la_web Publicar_en_TinyURL Publicar_en_Pastie Codigo_QR" | opciones -t "¿En donde?" -m "¿Donde lo queres ocultar?"` || exit
	case $MENU in
		0 )
		# genera el mensaje y lo muestra en base64
		echo "$ef" | cifrar "$k" | mostrar
		;;
		1 )
		# guardar en un archivo (propio)
		b=`archivo || exit`
		# genera basura
		pwgen -s 10000 | steghide embed -ef - -p "$k" -cf "$cf"
		# guarda nuestro mensaje
		echo "$ef" | steghide embed -ef - -p "$k" -cf "$b"
		;;
		2 )
		# busca una imagen al azar en la web (con tor)
		# descarga el RSS para buscar imagenes
		cd $PICTURES
		# genera el nombre del archivo
		cf="$(pwgen -1 $[$RANDOM%10+6]).jpg"
		for W in {1,2,3}; do
			# fuentes RSS
			FUENTE=$(echo -e "http://ycpi.api.flickr.com/services/feeds/photos_public.gne\n\
			http://www.nasa.gov/rss/lg_image_of_the_day.rss\n\
			http://backend.deviantart.com/rss.xml" | sed -n $[$RANDOM%3+1]p)
			# url de la imagen
			img_url=`proxychains wget -qO - $FUENTE\
			| grep -o '<*\(enclosure\|media:content\)[^>].*>' \
			| grep -o 'http://[^\"]*' | sed -n $[$RANDOM%6+1]p`
			# directorio de imagenes
			echo $img_url > /dev/stderr
			proxychains wget "$img_url" -O "$cf"
			if [ -f "$cf" ]; then
				break
			fi
		done | progreso
		if [ ! -f "$cf" ]; then
			error
			exit
		fi
		# agrega mucha basura
		pwgen -s 10000 | steghide embed -ef - -p "$k" -cf "$cf"
		# genera la imagen con password real
		echo "$ef" | steghide embed -ef - -p "$k" -cf "$cf"
		xdg-open "$(pwd)/$cf"
		echo "$(pwd)/$cf" | mostrar "Imagen con un secreto"
		;;
		3 )
		# publicar en tinyURL con Tor
		# genera el mensaje y lo muestra en base64
		m=`echo "$ef" | cifrar "$k"  -w0`
		for N in {1,2,3}; do
			sleep 3 | progreso &
			# si no se puede genera la tinyurl prueba varias veces
			u=`proxychains wget -U Mozilla "https://tinyurl.com/create.php?url=data:text/html;charset=utf-8;base64,$m" -qO - \
			| grep "'https://tinyurl.com/" | head -n 1 | cut -d "'" -f 2`
			echo "$u" && break || echo "no se genero la tinyURL" | error
		done
		echo "$u" | mostrar
		;;
		4 )
			# genera el mensaje y lo muestra en base64
			echo "$ef" | cifrar "$k" | pastie | mostrar

		exit
		# nopaste-it -f "$f" | sed -n '2p' | sed 's/\t//g'
		# "http://www.cjb.net/"=>{"image"=>"____"},
   		# "http://kimag.es/"=>{"userfile1"=>"____"},
		# "http://tinypic.com/"=>{"the_file"=>$ARGV[0]}
		# "http://uploadpie.com/"=>{"uploadedfile"=>$ARGV[0]}
		# "http://imgur.com/"=>{'file[]'=>$ARGV[0]}
		# fileinput # archivo
		# expire=4 # un dia
		# http://uploadpie.com/

	   	;;
		5)
	                # genera codigo QR
			cd $PICTURES
			sf=`pwgen -1`.png
			qrencode -o "$sf" "$(echo "$ef" | cifrar "$k" -w0)" || error "Los QR tienen espacio limitado"
			metadatos "$sf"
			echo "$(pwd)/$sf" | mostrar "Codigo QR generado"
	;;
	esac
	;;
	1 )
	# Descifrar

	# mensaje archivo o URL
	MENU=`echo -e "Mensaje Archivo_o_Codigo_QR Dirección_web" | opciones -t "Descifrar" -m "¿Donde queres buscar?"` || exit
	case $MENU in
		0 )
			# descifrado
			t=`mensaje` || exit
			k=`clave`
			echo "$t" | descifrar "$k" | mostrar
		;;
		1 )
			# archivo
			sf=`archivo` || exit
			# mensaje descifrado en archivo
			p=`clave`
			esteganografia "$p" "$sf" | mostrar
		;;
		2 )
			# url
			URL=`url` || exit
			# mensaje descifrado en archivo
			p=`clave`
			sleep 10 | progreso &
			# descargas
			if [ "$(echo $URL | grep tinyurl)" ]; then
				# contenida en la URL
				sf=`proxychains wget -S "$URL" -qO /dev/null 2> /dev/stdout | grep "Location:" | cut -d, -f2`
				tipo="text"
			else
				# contenida en el archivo
				[ `echo $URL | grep nopaste` ]; URL="${URL}&download"
				# crea un archivo temporal
				f=`mktemp`
				# descarga con proxy
				proxychains wget "$URL" -qO $f
				# tipo de archivo
				tipo=`file -i $f | sed 's/^.*:\ //g; s/\/.*$//g'`
				sf=`cat $f`
				# borra el archivo temporal
			fi
			# interpreta depende si es cifrado o estenografia
			if [ "$tipo" == "text" ]; then
				# si es un texto
				m=`echo $sf | descifrar "$p"`
			else
				# codigo de barras y luego mensaje oculto
				m=`esteganografia "$p" "$sf"`
			fi
			# borrar el archivo temporal para siempre
			echo "$m" | mostrar
			borrar $f
		;;
	esac

	;;
	2 )
		# publicacion anonima
		f=`mktemp`
		mensaje | pastie | mostrar
	;;
	3 )
		# Quitar metadatos
		archivos  || exit | while read ARCHIVO; do
			# falta quitar las caras
			# opcion para romper pixels
			metadatos "$ARCHIVO"
		done | progreso
	;;
	4 )
		# Eliminar archivos de modo seguro
		archivos | while read ARCHIVO; do
			# borra el archivo para simpre
			borrar "$ARCHIVO" | progreso
		done | progreso
	;;
	5 )
		echo -e "# Secreto\n_No tengo nada que ocultar, pero si mucho que proteger_\n\n" | mostrar
esac

exit

# Como funciona

- ¿Que queres hacer?

  1a. buscar mensaje
     1a. ¿campo de entrada para el mensaje?
     1b. ¿desde un archivo?
       a. buscar archivo
     1b. ¿desde una URL?
       a. Feed (busca descifra y se queda a la espera) con Tor
       b. Archivo lo descarga con Tor descifra y borra (de modo seguro)
     2. poner password
     3. mensaje descifrado

  1b. ¿Que queres ocultar?
     1a. Mensaje
       a. campo de entrada para el mensaje de texto
     1b. Archivo
       b. campo para elegir el archivo
     2. generar archivo con mensaje oculto
       1a. ¿elige un archivo?
         b. campo para elegir el archivo
       1b. ¿descarga una imagen o audio al azar?
       2. la modifica sustancialmente
       3. agrega el mensaje al archivo
     3a. Publicación
       4. publica de modo anonimo usando Tor
     3b. Guardar (sobre escribe el archivo)

## Quehaceres

- hacer mas generico el instalador
- simplificar
